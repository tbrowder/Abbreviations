=begin pod

=head1 NAME

B<Abbreviations> - Provides abbreviations for an input set of one or more words

Note: This version uses API 2 and is not compatible with previous versions.

=head1 SYNOPSIS

=begin code :lang<raku>
use Abbreviations;
my $words = 'A ab Abcde';
# The main exported routine:
my %abbrevs = abbreviations $words;
=end code

There are two shorter routine name abbreviations one can use that are
always exported:

=begin code :lang<raku>
 abbrevs
 abbrev
=end code

In the sprit of the module, one can C<use Abbreviations :ALL;> and
have these additional short forms available:

=begin code :lang<raku>
 abbre
 abbr
 abb
 ab
 a
=end code

Each of those is individually available by adding its name as an
adverb, e.g.:

=begin code :lang<raku>
use Abbreviations :abb;
my %abb = abb $words;
=end code

=head1 DESCRIPTION

B<Abbreviations> is a module with one automatically exported subroutine,
C<abbreviations>, which takes as input a set of words and returns the
original set with added unique abbreviations for the set.  (Note the
input words are also abbreviations in the context of this module.)

A I<word> satisfies the Raku regex C<$word ~~ /\S+/> which is quite
loose. Using programs can of course further restrict that if need
be. For example, for use with module B<Opt::Handler> words must
satisfy this regex: C<$word ~~ /<ident>/>.

The input word set can be in one of two forms: 
a list (recommended) or a string containing the words separated by spaces.
Duplicate words will be automatically and quietly eliminated. An empty word 
set will cause an exception.

Note the input word set will not be modified unless the C<:lower-case>
option is used. In that case, all characters will be transformed to lower-case.

One will normally get the result as a hash, but the return type can
be specified via an C<enum> if desired by selecting one of the
C<:out-type> options: 
C<AH> (AbbrevHash), C<AL> (AbbrevList), C<H> (Hash), C<L> (List), or C<S> (String). 
For example,

=begin code
my %abbrevs = abbrevs @words, :out-type(AH);
=end code

=head3 Output types by C<enum Out-type>

=item C<H> (Hash)

The default I<Hash> (C<H>) returned will
have input words as keys whose value will be a sorted list of one or more
valid abbreviations (sorted by length, shortest first).

=item C<AH> (AbbrevHash) 

An I<AbbrevHash> (C<AH>) is keyed by all of the valid abbreviations for the input 
word list and whose values are the word from which that abbreviation is defined.

=item C<AL> (AbbrevList)

An I<AbbrevList> (C<AL>) is special in that the returned list is the one, shortest
abbreviation for each of the input words in input order. For example,

=begin code
my @w = <Monday Tuesday Wednesday Thursday Friday Saturday Sunday>;
my @abb = abbrevs @w, :lower-case, :out-type(AL);
say @abb; # OUTPUT: « [m tu w th f sa su]»␤
=end code

=item C<L> (List) 

A I<List> (C<L>) contains all of the valid abbreviations for the input 
word list, including the words themselves, sorted first by the default Raku sort
and then by length (shortest first).

=item C<S> (String)

A I<String> (C<S>) is the string formed by joining the I<List> by a single space between words.

=head3 Improved abbreviation search

The abbreviation algorithm has been improved in the following way:
The input word set is
first formed into subgroups based on the the first
character of each word, next the subgroups have
their abbreviation sets formed, then all those sets are combined
into one set. The result will be a larger number of available
abbeviations in many cases than were available under the original API.

For example, given an input set consisting of the words C<A ab Abcde>, 
the I<min-abbrev-len> is one or two for each subgroup and 
the default output hash of abbreviations (with the original words as keys) is now

=begin code
    A     => ['A'],
    ab    => ['a', 'ab'],
    Abcde => ['Ab', 'Abc', 'Abcd', 'Abcde'],
=end code

In contrast, I<without> the initial subgrouping,
the I<min-abbrev-len> is three for the entire set and the
result will be:

=begin code
    A     => ['A'],
    ab    => ['ab'],                   # <- one less abbreviation
    Abcde => ['Abc', 'Abcd', 'Abcde'], # <- one less abbreviation
=end code

If the C<:lower-case> option is used, we get a slightly different result
since we no longer have any subgroups and the I<min-abbrev-len> is again 
three. 

=begin code
my $words = 'A ab Abcde':
my %abbr = abbrevs $words, :lower-case;
=end code

The result is

=begin code
    a     => ['a'],
    ab    => ['ab],
    abcde => ['abc', 'abcd', 'abcde'],
=end code

Notice the input word B<ab> now has only one abbreviation and B<abcde> has only three.

=head2 Other exported symbols

=head3 C<sub sort-list>

=begin code
sub sort-list(@list, :longest-first --> List) is export(:sort) {...}
=end code

This routine sorts the input list first by the default Raku sort and then
by word length. The order by length is by shortest abbreviation first unless the C<:longest-first>
option is used. This is the routine used for all the lists produced as output
in this module I<except> for the I<AbbrevList> (C<AL>) which keeps the original word set order.

=head3 C<enum Out-type>

The I<enum> C<Out-type> is exported automatically as it is required for use of C<sub abbreviations>.

=head3 C<sub auto-abbreviate>

=begin code
sub auto-abbreviate(@words) is export(:auto) {...}
=end code

This routine, slightly modified, is taken from the I<Rosetta Code> website. 
Given a string consisting of space-separated words, it returns the
minimum number of characters to abbreviate the set. It will fail on either
an empty word list or one with duplicate words, so the user is fore-warned.

=head1 AUTHOR

Tom Browder <tbrowder@cpan.org>

=head1 CREDITS

=item Leon Timmermans (aka @Leont) for inspiration from his Raku module C<Getopt::Long>.

=item @thundergnat, the original author of the Raku C<auto-abbreviate> algorithm on L<Rosetta Code|http://rosettacode.org/wiki/Abbreviations,_automatic#Raku>.

=item The Raku community for help with subroutine signatures.

=head1 COPYRIGHT and LICENSE

Copyright &#x00A9; 2020-2021 Tom Browder

This library is free software; you may redistribute or modify it under the Artistic License 2.0.

=end pod

