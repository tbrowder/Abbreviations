=begin pod

=head1 NAME

Abbreviations - Provides abbreviations for an input set of one or more words

B<NOTE: THIS VERSION IS API 2 AND HAS VERY DIFFERNT FEATURES COMPARED TO THE ORIGINAL API.>

=head1 SYNOPSIS

=begin code :lang<raku>
use Abbreviations;
my $words = 'A ab Abcde';
# The main exported routine:
my %abbrevs = abbreviations $words;
=end code

There are two shorter routine name abbreviations one can use that are
always exported:

=begin code :lang<raku>
 abbrevs
 abbrev
=end code

In the sprit of the module, one can C<use Abbreviations :ALL;> and
have these additional short forms available:

=begin code :lang<raku>
 abbre
 abbr
 abb
 ab
 a
=end code

Each of those is individually available by adding its name as an
adverb, e.g.:

=begin code :lang<raku>
use Abbreviations :abb;
my %abb = abb $words;
=end code

=head1 DESCRIPTION

B<Abbreviations> is a module with one automatically exported multi-subroutine,
C<abbreviations>, which takes as input a set of words and returns the
original set with added unique abbreviations for the set.  (Note the
input words are also abbreviations in the context of this module.)

A B<word> satisfies the Raku regex: C<$word ~~ /\S+/> which is quite
loose. Using programs can of course further restrict that if need
be. For example, for use with module B<Opt::Handler> words must
satisfy this regex: C<$word ~~ /<ident>/>.

The input word set can be in one of two forms: 
(1) a list (recommended)
or (2) a string containing the words separated by spaces.
Duplicate words will be automatically and
quietly eliminated.

Note the input word set will not be modified unless the C<:lower-case>
option is used. In that case, all characters will be transformed to lower-case.

One will normally get the result as a C<Hash>, but the return type can
be specified if desired by selecting one of options 
C<AbbrevHash>, or C<AbbrevList>. 
If more than one are selected, the choice is made silently in the
order C<AbbrevHash>, C<AbbrevList>;

=begin code
my $abbrevs = abbrevs @words, :AbbrevHash;
my @abbrevs = abbrevs $words, :AbbrevList;
=end code

The default C<Hash> returned will
have input words as keys whose value will be a sorted list of one or more
valid abbreviations (sorted by length, shortest first).

An C<AbbrevHash> is keyed by all of the valid abbreviations for the input 
word list and whose values are the word from which that abbreviation is defined.

An C<AbbrevList> is special in that the returned list is one, shortest
abbreviation for each of the input words in input order. For example:

=begin code
my @w = <Monday Tuesday Wednesday Thursday Friday Saturday Sunday>;
my @abb = abbrevs @w, :$lower-case, :AbbrevList;
say @abb; # OUTPUT: m tu w th f sa su
=end code

One other point about the process: the input word set is
first formed into subgroups based on the the first
character of each word as shown in Table 1. Then the subgroups have
their abbreviation sets formed, then all those sets are combined
into one set. The result will be a larger number of available
abbeviations in many cases.

For example, given an input set consisting of the words C<A ab Abcde>, 
the default output hash of abbreviations (with the original words as keys) is

=begin code
    A     => ,
    ab    => 'a',
    Abcde => 'Ab', 'Abc', 'Abcd',
=end code

If the C<:lower-case> option is used we get a surprisingly different result.

=begin code
my $words = 'A ab Abcde':
my %abbr = abbrevs $words, :lower-case;
=end code

The result is

=begin code
    a     => ,
    ab    => ,
    abcde => 'abc', 'abcd',
=end code

Notice the input word C<ab> now has no abbreviation.

One other routine may be exported: 

=begin code

sub sort-list(@list, :$longest-first --> List) is export(:sort) 
{...}
=end code

The routine sorts the input list first by the default sort and then
by word length. The order by length is by shortest first unless the C<:longest-first>
option is used.

=head1 AUTHOR

Tom Browder <tbrowder@cpan.org>

=head1 CREDITS

=item Leon Timmermans (aka @Leont) for inspiration from his Raku module C<Getopt::Long>.

=item @Thundergnat, the original author of the Raku C<auto-abbreviate> algorithm on L<Rosetta Code|http://rosettacode.org/wiki/Abbreviations,_automatic#Raku>.

=item The Raku community for help with subroutine signatures.

=head1 COPYRIGHT and LICENSE

Copyright &#x00A9; 2020 Tom Browder

This library is free software; you may redistribute or modify it under the Artistic License 2.0.

=end pod

